#include "server.h"
#include "ui_server.h"
#include <QThread>
server::server(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::server)
{
    ui->setupUi(this);
    tcpServer = new QTcpServer(this);
    tcpServer->listen(QHostAddress::Any,1234);//进入监听状态
    connect(tcpServer,SIGNAL(newConnection()),this,SLOT(on_newConnection()));

}

server::~server()
{
    delete ui;
}

void server::on_newConnection()
{
    //只要进入该函数，就说明有客户端在请求连接
    socket = tcpServer->nextPendingConnection();//返回待处理的套接字，之后就可以用 socket和连接的客户端
                                                 //进行通信。先不考虑多个客户端
    connect(socket,SIGNAL(readyRead()),this,SLOT(on_readyRead()));
    connect(socket,SIGNAL(disconnected()),this,SLOT(on_disconnected()));
}

void server::on_readyRead()
{
    QThread::sleep(10);
    //进到该函数就说明对方发送了数据过来
    //QString x = socket->read(100).toStdString().c_str();//最多读取100个字节
    char buf[256];
    int size = recv_one_data_package(buf,256);
    QString x(buf);
    qDebug() << x;
    ui->listWidget->addItem(x);
}

void server::on_disconnected()
{
    qDebug() << "客户端断开连接了";
}

void server::on_pushButton_clicked()
{
    QString x = ui->lineEdit->text();

    QListWidgetItem *aitem = new QListWidgetItem;
    aitem->setText(x);
    aitem->setTextAlignment(2);//右对齐
    ui->listWidget->addItem(aitem);
    //socket->write(x.toUtf8());//发送数据
    send_one_data_package(x.toUtf8(),x.size());
    ui->lineEdit->clear();
}

//读取一个数据包,fd连接套接字描述符，p指向的数组用来保存读取到的原始数据包，size是数组p的大小，防止越界
/*
    收到数据之后需要转换回去，规则是：
    遇到0xfd 0xfd，就转换为 0xfd
    遇到0xfd 0x7f，就转换为 0x7f
    遇到单独的0x7f 说明是包头或者包尾
*/
int server::recv_one_data_package(char * p,int size)
{
    char x;
    int i=0;
    do
    {
        socket->read(&x,1);
    } while (x != HEAD);//找到包头，下一个字节开始就是数据包的内容了

    i = 0;
    while(1)
    {
        socket->read(&x,1);

        if(x == 0xfd)//如果是 0xfd
        {
            socket->read(&x,1);
            if(x == 0xfd)//说了有两个连续的 0xfd ,需要转换为一个 0xfd
            {
                p[i++] = 0xfd;
            }
            else if(x == 0x7f)//说了有连续的 0xfd 0xff,需要转换为一个 0xff
            {
                p[i++] = 0x7f;
            }
        }
        else if(x == TAIL || i == size-1)//说明遇到包尾
        {
            break;
        }
        else//普通字符
        {
            p[i++] = x;
        }
    }
    return i;//返回实际的数据包的长度
}


/*
    发送一个经过处理的数据包 ，fd套接字描述符，p原始数据包的首地址，size是原始数据包的大小

    处理规则：
        如果用户原始数据中本来有0x7f，那么就把它变为  0xfd 0x7f
        如果用户原始数据中本来有0xfd，那么就把它变为  0xfd 0xfd
*/
void server::send_one_data_package(const char *p,int size)
{
    //极端情况下（原始数据中全是0xff或0xfd），转换之后是转换之前的两倍
    char * r = new char[2*size];//分配两倍空间

    //开始转换
    int i;
    int j=0;
    for(i=0;i<size;i++)
    {
        if(p[i] == 0x7f)//是0xff,转换为0xfd 0xff
        {
            r[j++] = 0xfd;
            r[j++] = 0x7f;
        }
        else if(p[i] == 0xfd)//是0xfd ，转换为 0xfd 0xfd
        {
            r[j++] = 0xfd;
            r[j++] = 0xfd;
        }
        else
        {
            r[j++] =p[i];
        }
    }
    char * q = new char[j + 2];
    q[0] = HEAD;
    memcpy(q+1,r,j);
    q[j+1] = TAIL;

    socket->write(q,j+2);
    delete r;
    delete q;
}







